generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model WeekIntentions {
  id        String    @id @default(uuid())
  startWeek DateTime?
  endWeek   DateTime?
  status    Status    @default(NONE)
  days      Day[]
}

model Intention {
  id    String @id @default(uuid())
  order Int
  hour  String
  value String
  dayId String
  Day   Day    @relation(fields: [dayId], references: [id], onDelete: Cascade)
}

model Day {
  id             String         @id @default(uuid())
  day            Weekday
  dateOfDay      DateTime?
  weekId         String
  WeekIntentions WeekIntentions @relation(fields: [weekId], references: [id], onDelete: Cascade)
  intentions     Intention[]
}

model Announcements {
  id       String  @id @default(uuid())
  subtitle String?
  status   Status  @default(NONE)
  value    String
}

model Admin {
  id    String @id @default(uuid())
  email String @unique

  @@index([email])
}

model Category {
  id     String  @id @default(uuid())
  name   String
  order  Int?
  show   Boolean @default(false)
  albums Album[]
}

model Album {
  id         String    @id @default(uuid())
  title      String
  subtitle   String?
  show       Boolean   @default(false)
  categoryId String?
  category   Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  images     Image[]   @relation("AlbumToImages")
  cover      Image?    @relation("AlbumToCover", fields: [coverId], references: [id] , onDelete: SetNull)
  coverId    String?
}

model Image {
  id      String  @id @default(uuid())
  albumId String?
  path    String?
  album   Album?  @relation("AlbumToImages", fields: [albumId], references: [id], onDelete: Cascade)
  coverOf Album[] @relation("AlbumToCover")
}

enum Weekday {
  MONDAY
  WEDNESDAY
  TUESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum Status {
  NONE
  UPCOMING
  ACTIVE
}
